### macros used in scenarios

##################################################################
# RANDOM_NON_PLAYER_FACTION
#   choose a random faction number that is not the player's faction, 
#   put it in $random
##################################################################
#define RANDOM_NONPLAYER_FACTION
	{RANDOM_VARIABLE (side_faction[2].variable) $factions}
	[while]
	[variable]
	name=side_faction[2].variable
	equals=$player_faction
	[/variable]
	[do]
		{RANDOM_VARIABLE (side_faction[2].variable) $factions}
	[/do]
	[/while]
#enddef

# not working yet, don't use
#define CHOOSE_CAMPAIGN
	{VARIABLE campaign_type at_large}
	[if]
		[variable]
		name=player_faction
		equals=loyalist
		[/variable]
	[then]
		
	[/then]
	{CLEAR_KEY_VALUE faction}
#enddef

##################################################################
# SCENARIO_SETUP (event)
#   perform a lot of common setup actions needed by every scenario
#   * at prestart, increment the scenario number and difficulty,
#     kill any leader created by the [side] tag
##################################################################

#define SCENARIO_SETUP
	[event]
	name=prestart

		### set up scenario_number
		{VARIABLE_OP scenario_number add 1}
		[if]
		[variable]
		name=scenario_number
		equals=1
		[/variable]
		[then]

			### some one-time init
			## kill dummy player leader
			[kill]
			side=1
			[/kill]

			## set initial difficulty
			{VARIABLE difficulty 100}
		[/then]
		[else]
			[if]
				[variable]
				name=funding_mode
				equals="Excessive"
				[/variable]
			[then]
#ifdef EASY
				{VARIABLE_OP player_gold multiply 1.05}
#endif
#ifdef NORMAL
				{VARIABLE_OP player_gold multiply 1.10}
#endif
#ifdef HARD
				{VARIABLE_OP player_gold multiply 1.15}
#endif
			[/then]
			[else]
				[if]
					[variable]
					name=funding_mode
					equals="Moderate"
					[/variable]
				[then]
					{VARIABLE player_gold 150}
					{VARIABLE squared $scenario_number}
					{VARIABLE_OP squared add 8}
					[if]
						[variable]
						name=squared
						greater_than_equal_to=13
						[/variable]
					[then]
						{VARIABLE_OP squared multiply $squared}
						{VARIABLE player_gold $squared}
					[/then]
					[/if]
#ifdef NORMAL
					{VARIABLE_OP player_gold multiply 1.5}
#endif
#ifdef HARD
					{VARIABLE_OP player_gold multiply 2}
#endif
					{CLEAR_KEY_VALUE squared}
				[/then]
				[/if]
			[/else]
			[/if]
		[/else]
		[/if]

		### clean up from last scenario

		### increment difficulty
#ifdef EASY
		{VARIABLE_OP difficulty multiply 1.15}
#endif
#ifdef NORMAL
		{VARIABLE_OP difficulty multiply 1.30}
#endif
#ifdef HARD
		{VARIABLE_OP difficulty multiply 1.50}
#endif
		[if]
			[and]
				[variable]
				name=funding_mode
				equals="Moderate"
				[/variable]
				[variable]
				name=scenario_number
				greater_than_equal_to=5
				[/variable]
			[/and]
		[then]
			{VARIABLE difficulty $scenario_number}
			{VARIABLE_OP difficulty multiply $scenario_number}
			{VARIABLE_OP difficulty multiply $scenario_number}
#ifdef EASY
			{VARIABLE_OP difficulty multiply 2}
#endif
#ifdef NORMAL
			{VARIABLE_OP difficulty multiply 3}
#endif
#ifdef HARD
			{VARIABLE_OP difficulty multiply 5}
#endif
		[/then]
		[/if]

		{VARIABLE test $player_gold}
        # reset is currently on fifth campaign of Hard/Classic funding, may need adjustment
		{VARIABLE_OP test multiply 3.5}
		[if]
			[and]
				[variable]
					name=test
					less_than=$difficulty
				[/variable]
				[variable]
					name=funding_mode
					not_equals="Moderate"
				[/variable]
			[/and]
		[then]
			# may need adjustment
			{VARIABLE difficulty $player_gold}
		[/then]
		[/if]
		{CLEAR_KEY_VALUE test}

		# should be in FACTIONS_PREDECLARE, but trying not to pollute WML
		{CLEAR_KEY_VALUE factions}
	[/event]
#enddef

##################################################################
# MERDWARF_NONSENSE
#   (event) Small chance of producing a merdwarf
##################################################################
#define MERDWARF_NONSENSE
	[event]
	name=turn 2
	[if]
		[variable]
		name=had_merdwarf
		equals=1
		[/variable]
	[else]
		{RANDOM 1..50}
		[if]
			[variable]
			name=random
			equals=1
			[/variable]
		[then]
			[store_starting_location]
			side=2
			[/store_starting_location]
			[unit]
			type=Merdwarf
			side=2
			x=$location.x
			y=$location.y
			[/unit]
			{VARIABLE had_merdwarf 1}
		[/then]
		[/if]
	[/else]
	[/if]
	[/event]

	[event]
	#textdomain wesnoth-Mystery_Campaign
	name=attack
		[filter_second]
		type=Merdwarf
		[/filter_second]
		[message]
		speaker=second_unit
		message= _ "Please don't hurt me! Have you no pity?"
		[/message]
	[/event]
#enddef


##################################################################
# ENSURE_GOLD Side Amount
#   ensure that side {Side} has at least {Amount} gold
##################################################################
#define ENSURE_GOLD SIDE AMOUNT
	[store_gold]
	side={SIDE}
	[/store_gold]
	[while]
		[variable]
		name=gold
		less_than={AMOUNT}
		[/variable]
	[do]
		[gold]
		side={SIDE}
		amount=20
		[/gold]
		[store_gold]
		side={SIDE}
		[/store_gold]
	[/do]
	[/while]
#enddef

##################################################################
# SURRENDER Side
#   (event) arranges for side {Side} to surrender if things are 
#   going badly.  The idea is to prevent users from abusing long
#   scenarios to bleed the enemy leader for experience.
##################################################################

#define SURRENDER SIDE MINGOLD MINUNITS
	[event]
	#textdomain wesnoth-Mystery_Campaign
	name=new turn
	first_time_only=no
	[store_gold]
	side={SIDE}
	[/store_gold]
	[store_unit]
	[filter]
		side={SIDE}
	[/filter]
	kill=no
	variable=units
	[/store_unit]
	#{DEBUGMSG (gold=$gold units=$units.length)}
	[if]
		[variable]
		name=gold
		less_than={MINGOLD}
		[/variable]
		[variable]
		name=units.length
		less_than={MINUNITS}
		[/variable]
	[then]
		[if]
			[have_unit]
			side={SIDE}
			canrecruit=1
			[/have_unit]
		[then]
			[message]
			side={SIDE}
			canrecruit=1
			message= _ "Oh, it's hopeless! I surrender!"
			[/message]
		[/then]
		[else]
			[message]
			speaker=narrator
			message= _ "Your enemy has surrendered!"
			[/message]
		[/else]
		[/if]
		[endlevel]
		result=victory
		bonus=yes
		[/endlevel]
	[/then]
	[/if]
	{CLEAR_VARIABLE gold}
	{CLEAR_VARIABLE units}
	[/event]
#enddef

##################################################################
# generator stuff cribbed from Random_Scenario.cfg
##################################################################

#define MIN_COST_ROAD X
	[road_cost]
	terrain={X}
	cost=2
	convert_to={X}
	[/road_cost]
#enddef

#define GENERATOR_BOILERPLATE
	#list of common terrain types which come in at
	#different heights, from highest to lowest
	[height]
	height=500
	terrain=m
	[/height]
	[height]
	height=400
	terrain=h
	[/height]
	[height]
	height=40
	terrain=g
	[/height]
	[height]
	height=30
	terrain=d
	[/height]
	[height]
	height=5
	terrain=c
	[/height]
	[height]
	height=0
	terrain=s
	[/height]

	#water at cold temperatures becomes ice
	[convert]
	min_height=50
	max_temperature=20
	from=cs
	to=i
	[/convert]

	#at low temperatures, snow appears
	[convert]
	min_height=50
	max_temperature=50
	from=gd
	to=S
	[/convert]

	#hills at low temperatures get snow on them
	[convert]
	max_temperature=50
	from=h
	to=H
	[/convert]

	#swamp appears on low land, at moderate temperatures
	[convert]
	min_temperature=500
	max_temperature=700
	max_height=200
	from=g
	to=w
	[/convert]

	#forest appears at moderate temperatures
	[convert]
	min_temperature=300
	max_temperature=500
	from=g
	to=f
	[/convert]

	#desert appears at high temperatures
	[convert]
	min_temperature=900
	from=g
	to=d
	[/convert]

	#road costs
	[road_cost]
	terrain=g
	cost=10
	convert_to=r
	[/road_cost]

	[road_cost]
	terrain=d
	cost=25
	convert_to=r
	[/road_cost]

	[road_cost]
	terrain=f
	cost=20
	convert_to=r
	[/road_cost]

	[road_cost]
	terrain=c
	cost=50
	convert_to_bridge=|,/,\
	convert_to=C
	[/road_cost]
	
	[road_cost]
	terrain=h
	cost=30
	convert_to=r
	[/road_cost]
	
	[road_cost]
	terrain=m
	cost=50
	convert_to=r
	[/road_cost]

	#road going through snow is covered over by
	#the snow (presumably the road was built when
	#it wasn't snowing)
	[road_cost]
	terrain=S
	cost=20
	convert_to=S
	[/road_cost]

	{MIN_COST_ROAD r}
	{MIN_COST_ROAD |}
	{MIN_COST_ROAD /}
	{MIN_COST_ROAD \}
	{MIN_COST_ROAD C}

	[village]
	terrain=g
	convert_to=v
	adjacent_liked=gccccccc|/\RRrrtvhf
	rating=8
	[/village]
	[village]
	terrain=d
	convert_to=v
	rating=2
	adjacent_liked=gccc|/\RRrrtvhf
	[/village]

	#villages in forest are Elvish
	[village]
	terrain=f
	convert_to=t
	rating=4
	adjacent_liked=gccc|/\RRrrtvhfff
	[/village]
	[village]
	terrain=h
	convert_to=v
	rating=4
	adjacent_liked=gccc|/\RRrrtvhf
	[/village]
	[village]
	terrain=m
	convert_to=v
	rating=3
	adjacent_liked=gccc|/\RRrrtvhf
	[/village]

	#villages in snow
	[village]
	terrain=S
	convert_to=V
	rating=3
	adjacent_liked=gccc|/\RRrrtvhf
	[/village]

	[village]
	terrain=F
	convert_to=V
	rating=3
	adjacent_liked=gccc|/\RRrrtvhf
	[/village]

	#swamp villages
	[village]
	terrain=w
	convert_to=Y
	rating=2
	adjacent_liked=gccc|/\RRrrtvhf
	[/village]

	#mermen villages - give them low chance of appearing
	[village]
	terrain=c
	convert_to=Z
	rating=1
	adjacent_liked=cc
	[/village]

	[castle]
	valid_terrain=gfh
	min_distance=12
	[/castle]

	[naming]
	{VILLAGE_NAMES}
	[/naming]

	[village_naming]
	{VILLAGE_NAMES}
	[/village_naming]
#enddef
